package com.housing.service;

import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.housing.dto.UserDTO;
import com.housing.entity.User;
import com.housing.exception.HousingException;
import com.housing.repository.UserRepository;

import jakarta.transaction.Transactional;

@Service(value = "userServiceImpl")
@Transactional
public class UserServiceImpl implements UserService {

	@Autowired
	private UserRepository userRepository;

	private ModelMapper modelMapper = new ModelMapper();

	@Override
	public Long addUser(UserDTO userDTO) throws HousingException {
		User newUser = modelMapper.map(userDTO, User.class);
		userRepository.save(newUser);
		return newUser.getId();
	}

	@Override
	public UserDTO getUser(Long userId) throws HousingException {
		Optional<User> optional = userRepository.findById(userId);
		User currentUser = optional.orElseThrow(() -> new HousingException("User doesn't exists."));
		UserDTO currentUserDTO = modelMapper.map(currentUser, UserDTO.class);
		return currentUserDTO;
	}

	@Override
	public List<UserDTO> getAllUsers() throws HousingException {
		List<User> allUsers = (List<User>) userRepository.findAll();
		if (allUsers.isEmpty()) {
			throw new HousingException("There are no users.");
		}
		List<UserDTO> allUserDTOs = modelMapper.map(allUsers, new TypeToken<List<UserDTO>>() {
		}.getType());
		return allUserDTOs;
	}

	@Override
	public Boolean userAlreadyExists(UserDTO userDTO) throws HousingException {
		Optional<User> oldUser = userRepository.findByUsernameOrEmail(userDTO.getUsername(), userDTO.getEmail());
		if(oldUser.isPresent()) {
			return true;	
		}
		else {
			return false;
		}
	}


}
