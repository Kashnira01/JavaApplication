package com.housing.entity;

import java.time.LocalDate;

import javax.validation.constraints.FutureOrPresent;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.PastOrPresent;
import javax.validation.constraints.Size;

import com.housing.utility.ServiceRequestStatus;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

@Entity
@Table(name = "service_request_tbl")
public class ServiceRequest {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column
	private Long id;

	@ManyToOne
	@JoinColumn(name = "service_id", nullable = false)
	private Service service;

	@ManyToOne
	@JoinColumn(name = "user_id", nullable = false)
	private User user;

	@ManyToOne
	@JoinColumn(name = "professional_id", nullable = false)
	private Professional professional;

	@NotNull(message = "{serviceRequest.requestStatus.absent}")
	@Enumerated(EnumType.STRING)
	@Size(max = 15, message = "{serviceRequest.requestStatus.invalid}")
	@Column(name = "requestStatus", nullable = false, length = 15)
	private ServiceRequestStatus requestStatus = ServiceRequestStatus.REQUESTED;

	@FutureOrPresent(message = "{serviceRequest.requestDate.invalid}")
	@Column(name = "requestDate", nullable = false)
	private LocalDate requestDate;

	@PastOrPresent(message = "serviceRequest.completionDate.invalid")
	@Column(name = "completionDate")
	private LocalDate completionDate;

	@Size(max = 1000, message = "{serviceRequest.feedback.invalid}")
	@Column(name = "feedback", nullable = false, length = 1000)
	private String feedback;

	
	
}
